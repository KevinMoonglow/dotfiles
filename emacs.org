#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./.emacs.d/init.el


* Setup
This does the initial basic setup.

** Customization values
Supports a customization system where interactive guis can configure certain values. This tells it where to look for and where to save out these values and then loads the values currently stored in the file.
#+begin_src emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+end_src

** Minor basic settings
Here we set a few basic settings.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)
  (set-default 'tab-width 4)
  (set-default 'require-final-newline t)
  (set-default 'wrap-prefix (propertize ">   " 'face 'font-lock-comment-face))
  (setq inhibit-compacting-font-caches t)
  (defface quote '() "Defined to avoid log spam?")
  (save-place-mode 1)
#+end_src

** Configure the package management
Tells Emacs where to find some package repositories, then pulls in ~use-package~ which simplifies loading other packages.
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives `(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (eval-when-compile
    (require 'use-package))
  (setq use-package-always-ensure t)
#+end_src

** Automate tangling

#+begin_src emacs-lisp
  (defun luna/config-tangle ()
    (when (string-equal (buffer-file-name)
      (expand-file-name "~/.dotfiles/emacs.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  ; Register the save hook
  (defun luna/config-tangle-register ()
    (add-hook 'after-save-hook #'luna/config-tangle))

  ; Register the hook for org mode
  (add-hook 'org-mode-hook #'luna/config-tangle-register)
#+end_src

* EXWM
First we have some actions functions that we want to make sure only execute if EXWM loaded successfully, so we place those inside a hook that'll execute on EXWM load.
#+begin_src emacs-lisp
  (defun luna/exwm-hook ()
    (start-process-shell-command "xkbmap1" nil "setxkbmap -option compose:ralt")
    (start-process-shell-command "xkbmap2" nil "setxkbmap -option caps:ctrl_modifier")
    ;(start-process-shell-command "xkbmap2" nil "setxkbmap -option caps:escape_shifted_capslock")

    (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
    (add-to-list 'default-frame-alist '(fullscreen . maximized))
  )
#+end_src

This is the function we call to request the exwm startup.
#+begin_src emacs-lisp

  (defun luna/exwm-rename-buffer-hook ()
    (exwm-workspace-rename-buffer exwm-class-name)
  )
  (defun luna/exwm-screen-hook ()
    (start-process-shell-command "xrandr" nil "xrandr --output HDMI-0 --rotate left --mode 1920x1080 --rate 144 --output DP-0 --primary --pos 0x480 -s 3640x1440")
    (start-process-shell-command "feh" nil "~/.fehbg")
  )
  (defun luna/exwm ()  
      (require 'exwm)
      (setq exwm-workspace-number 6)

      (add-hook 'exwm-update-class-hook #'luna/exwm-rename-buffer-hook)

      (setq exwm-input-global-keys
            `(
              ([?\s-q] . exwm-reset)
              ([?\s-w] . exwm-workspace-switch)
              ([?\s-j] . windmove-down)
              ([?\s-k] . windmove-up)
              ([?\s-h] . windmove-left)
              ([?\s-l] . windmove-right)
              ([?\s-J] . windmove-swap-states-down)
              ([?\s-K] . windmove-swap-states-up)
              ([?\s-H] . windmove-swap-states-left)
              ([?\s-L] . windmove-swap-states-right)
              ([?\s-F] . exwm-floating-toggle-floating)
              ([?\s-\C-j] . evil-window-decrease-width)
              ([?\s-\C-K] . evil-window-increase-height)
              ([?\s-\C-h] . evil-window-decrease-height)
              ([?\s-\C-l] . evil-window-increase-width)
              ([?\s-w] . kill-buffer)
              ([?\s-c] . exwm-input-grab-keyboard)
              ([?\s-r] . counsel-linux-app)
              ([?\s-R] . (lambda (command)
                           (interactive (list (read-shell-command "$ ")))
                           (start-process-shell-command command nil command)))
              ,@(mapcar (lambda (i)
                          `(,(kbd (format "s-%d" i)) .
                            (lambda ()
                              (interactive)
                              (exwm-workspace-switch-create ,(- i 1)))))
                        (number-sequence 1 9))))
      (define-key exwm-mode-map (kbd "s-z") 'exwm-input-send-next-key)
      (setq exwm-input-prefix-keys
        '(?\C-x
          ?\M-x
          ?\M-`
          ?\C-h
          ?\M-\ )
      )

      (require 'exwm-randr)
      (setq exwm-randr-workspace-monitor-plist '(5 "HDMI-0"))

      (add-hook 'exwm-randr-screen-change-hook #'luna/exwm-screen-hook)
      (exwm-randr-enable)

      (require 'exwm-systemtray)
      (exwm-systemtray-enable)

      (add-hook 'exwm-init-hook #'luna/exwm-hook)

      (exwm-enable)
    )
#+end_src

* Appearance
Cosmetic settings:

** Theme
Sets the location for custom themes and loads up my personal theme file.

#+begin_src emacs-lisp
  (setq custom-theme-directory "~/.emacs.d/themes")
  (load-theme 'Lunacy t)
#+end_src

** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Terminus"
                      :weight 'bold
                      :height 160)

  (set-face-attribute 'fixed-pitch nil
                      :font "Terminus"
                      :weight 'bold
                      :height 160)

  (set-face-attribute 'variable-pitch nil
                      :font "Cantarell"
                      :weight 'regular
                      :height 160)

  (set-fontset-font t nil (font-spec :family "Symbols Nerd Font Mono") nil 'prepend)
  (use-package all-the-icons)
#+end_src

** Colored braces
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Reduce modeline clutter
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

** Modeline
#+begin_src emacs-lisp
    (deftheme luna/modeline "Luna's modeline")
    (custom-theme-set-variables 'luna/modeline '(mode-line-format '(
      ;(mode-line-frame-identification mode-line-buffer-identification)
      (:propertize "%b " face 'mode-line-buffer-id)
      (:propertize ("" (:eval (if (buffer-modified-p) "[+]" ""))) face 'mode-line-buffer-id)
      (:propertize "" face '(:foreground "#dd65dd"))
      (:propertize mode-line-misc-info)
      " "
      (:propertize exwm-title)
      (:eval (propertize " " 'display `(space :align-to (- right 20))))
      (:propertize "" face '(:foreground "#aa35aa"))
      (:propertize "%6p " face '(:foreground "#ffffff" :background "#aa35aa"))
      (:propertize "" face '(:foreground "#dd64dd" :background "#aa35aa"))
      (:propertize "%6l,%3C " face 'mode-line-buffer-id)
    )))
    (enable-theme 'luna/modeline)
  ;;   (use-package doom-modeline)
  ;;   (setq doom-modeline-icon t)
  ;;   (setq doom-modeline-height 8)
  ;;   (setq doom-modeline-hud nil)
  ;;   (doom-modeline-def-modeline 'luna/doom-modeline
  ;;    '(buffer-info)
  ;;    '()
  ;;   )
  ;;   (defun luna/mk-modeline ()
  ;;      (doom-modeline-set-modeline 'luna/doom-modeline 'default))
  ;; (add-hook 'doom-modeline-mode-hook #'luna/mk-modeline) ;
#+end_src

** Background
Make the background transparent.
#+begin_src emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha-background 90)
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

* Org Mode
#+begin_src emacs-lisp
  (defun luna/org-mode-hook ()
    (org-indent-mode)
    (setq evil-auto-indent nil)

    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.15)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.05)
                    (org-level-5 . 1.05)
                    (org-level-6 . 1.05)
                    (org-level-7 . 1.05)
                    (org-level-8 . 1.05)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
    (face-remap-add-relative 'default 'org-default)
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
  )
  (defun luna/org-visual-fill ()
    (setq visual-fill-column-width 120
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1)
  )

  (use-package org
    :hook (org-mode . luna/org-mode-hook)
    :config
    (setq org-ellipsis " ▼")
    (set-face-attribute 'org-block nil :foreground nil :weight 'bold :inherit '(fixed-pitch shadow))
    (set-face-attribute 'org-block-begin-line nil :weight 'bold :inherit '(fixed-pitch))
    (set-face-attribute 'org-code nil :weight 'bold :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil :weight 'bold :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
        (python . t)
        (js . t)
        )
    )
    (setq org-confirm-babel-evaluate nil)

    (require 'ob-tangle)
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
  ) 
  


  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "⚬" "●" "○" "●" "○" "●"))
  )

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . luna/org-visual-fill)
  )


  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

#+end_src

* Autocompletion
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :config
  (ivy-mode)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
)

(use-package counsel
  :diminish
  :after ivy
  :config
  (counsel-mode)
)

(use-package ivy-rich
  :after ivy
  :config
  (ivy-rich-mode)
)
#+end_src

* Keybindings
#+begin_src emacs-lisp
  (use-package which-key
    :diminish
    :config
    (which-key-mode)
  )
#+end_src

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-u-delete t)
    (setq evil-want-Y-yank-to-eol t)
    (setq evil-want-C-w-in-emacs-state t)
    :config
  (evil-mode 1)
  )
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
  )
  (defun luna/evil-mc-down ()
    "Make downward cursor"
    (interactive)
    (evil-mc-pause-cursors)
    (evil-mc-make-cursor-here)
    (evil-next-line)
    (evil-mc-resume-cursors)
  )
  (defun luna/evil-mc-up ()
    "Make downward cursor"
    (interactive)
    (evil-mc-pause-cursors)
    (evil-mc-make-cursor-here)
    (evil-previous-line)
    (evil-mc-resume-cursors)
  )


  (use-package evil-mc
    :after (evil general)
    :custom-face
    (evil-mc-cursor-default-face ((t (:background "#ff0000"))))
    :config
    (setq evil-mc-enable-bar-cursor t)
    (setq evil-mc-undo-cursors-on-keyboard-quit t)
    (global-evil-mc-mode 1)
    (general-define-key
      :states '(normal visual)
      :keymaps 'evil-mc-key-map
      "C-<down>" 'luna/evil-mc-down
      "C-<up>" 'luna/evil-mc-down
      )
    (general-define-key
     :states 'normal
     :keymaps 'evil-mc-map
     "ESC" 'evil-mc-undo-all-cursors
    )

   ;; (evil-define-key '(normal visual) 'global
   ;;   "gzm" #'evil-mc-make-all-cursors
   ;;   "gzu" #'evil-mc-undo-all-cursors
   ;;   "gzz" #'evil-mc-toggle-cursors
   ;;   "gzc" #'evil-mc-make-cursor-here
   ;;   "gzn" #'evil-mc-make-and-goto-next-cursor
   ;;   "gzp" #'evil-mc-make-and-goto-prev-cursor
   ;;   "gzN" #'evil-mc-make-and-goto-last-cursor
   ;;   "gzP" #'evil-mc-make-and-goto-first-cursor)
   ;;  (with-eval-after-load 'evil-mc
   ;;    (evil-define-key '(normal visual) evil-mc-key-map
   ;;      (kbd "C-n") #'evil-mc-make-and-goto-next-cursor
   ;;      (kbd "C-N") #'evil-mc-make-and-goto-last-cursor
   ;;      (kbd "C-p") #'evil-mc-make-and-goto-prev-cursor
   ;;      (kbd "C-P") #'evil-mc-make-and-goto-first-cursor
   ;;      (kbd "C-<down>") #'evil-mc-make-and-goto-next-cursor
   ;;      (kbd "C-<up>") #'evil-mc-make-and-goto-prev-cursor
   ;;      ))								;
  )
  ;;(use-package evil-multiedit
  ;;  :after (evil evil-mc)
  ;;  :config
  ;;  (evil-define-key 'normal 'global
  ;;    (kbd "M-d")   #'evil-multiedit-match-symbol-and-next
  ;;    (kbd "M-D")   #'evil-multiedit-match-symbol-and-prev)
  ;;  (evil-define-key 'visual 'global
  ;;    "R"           #'evil-multiedit-match-all
  ;;    (kbd "M-d")   #'evil-multiedit-match-and-next
  ;;    (kbd "M-D")   #'evil-multiedit-match-and-prev)
  ;;  (evil-define-key '(visual normal) 'global
  ;;    (kbd "C-M-d") #'evil-multiedit-restore)

  ;;  (with-eval-after-load 'evil-multiedit
  ;;    (evil-define-key 'multiedit 'global
  ;;      (kbd "M-d")   #'evil-multiedit-match-and-next
  ;;      (kbd "M-S-d") #'evil-multiedit-match-and-prev
  ;;      (kbd "RET")   #'evil-multiedit-toggle-or-restrict-region)
  ;;    (evil-define-key '(multiedit multiedit-insert) 'global
  ;;      (kbd "C-n")   #'evil-multiedit-next
  ;;      (kbd "C-p")   #'evil-multiedit-prev))

  ;;)
#+end_src

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)

    (setq luna/leader-map (make-sparse-keymap))
    (general-create-definer luna/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "M-SPC"
      :prefix-map 'luna/leader-map
      )
    (global-set-key (kbd "<escape>") 'keyboard-quit)



    (luna/leader-keys
         "." '(find-file :which-key ".")
         ":" '(counsel-M-x :which-key "M-x")
         ";" '(eval-expression :which-key "Eval Expression")
         "/" '(swiper :which-key "Swiper Search")
         "]" '(next-buffer :which-key "Next Buffer")
         "[" '(previous-buffer :which-key "Previous Buffer")
         "h" '(:keymap help-map :which-key "help")
         ;"h" '(:ignore t :which-key "help")
         ;"h f" '(describe-function :which-key "Describe Function")
         ;"h k" '(describe-key :which-key "Describe Key")
         ;"h v" '(describe-variable :which-key "Describe Variable")

         "b" '(:ignore t :which-key "buffers")
         "b b" '(counsel-switch-buffer :which-key "Switch Buffer")
         "b ]" '(next-buffer :which-key "Next Buffer")
         "b [" '(previous-buffer :which-key "Previous Buffer")
         "b n" '(next-buffer :which-key "Next Buffer")
         "b p" '(previous-buffer :which-key "Previous Buffer")
         "b N" '(evil-buffer-new :which-key "New Buffer")
         "b d" '(kill-current-buffer :which-key "Kill Buffer")
         "b k" '(kill-current-buffer :which-key "Kill Buffer")
         "p" '(projectile-command-map :which-key "projectile")
         "p s" '(:ignore t :which-key "search")
         "p x" '(:ignore t :which-key "shell")

         "g" '(:ignore t :which-key "git")
         "g g" '(magit-status :which-key "Status")
         "-" '(dired :which-key "DirEd")
         "=" '(treemacs-select-window :package treemacs :which-key "treemacs")

         "l" '(:keymaps lsp-mode-map :keymap lsp-command-map :package lsp-mode :which-key "lsp")

         "w" '(:keymap evil-window-map :which-key "window")

         "i" '(exwm-input-release-keyboard :keymaps exwm-mode-map :which-key "grab")

         "x"     '(:ignore t :which-key "exwm")
         "x d"   '(:ignore t :which-key "debug")
         "x t"   '(:ignore t :which-key "toggle")
         "x d l" '(xcb-debug:clear :wk "debug:clear")
         "x d m" '(xcb-debug:mark :wk "debug:mark")
         "x d t" '(exwm-debug :wk "debug")
         "x f"   '(exwm-layout-set-fullscreen :wk "fullscreen")
         "x h"   '(exwm-floating-hide :wk "hide floating")
         "x k"   '(exwm-input-release-keyboard :wk "grab")
         "x m"   '(exwm-workspace-move-window :wk "move to workspace")
         "x q"   '(exwm-input-send-next-key :wk "send next key")
         "x t f" '(exwm-floating-toggle-floating :wk "float")
         "x t m" '(exwm-layout-toggle-mode-line :wk "modeline")
    )

    ;; Or :keymaps 'map-name
    ;(general-imap org-mode-map "TAB" #'indent-for-tab-command)
    ;(general-nmap org-mode-map "TAB" 'org-cycle)
    (general-imap "C-g" 'evil-normal-state)
    (general-def company-active-map "<tab>" 'company-complete-selection)
    (general-imap lsp-mode-map "<tab>" 'company-indent-or-complete-common)
    ;(general-imap term-mode-map "C-d" 'term-delchar-or-maybe-eof)
    (general-def exwm-mode-map "M-SPC" 'luna/leader-map)

    (general-def ivy-minibuffer-map "C-j" 'ivy-next-line)
    (general-def ivy-minibuffer-map "C-k" 'ivy-previous-line)
  )
#+end_src

#+begin_src emacs-lisp
(use-package hydra)
(use-package ivy-hydra
  :after (hydra ivy))
#+end_src
* Help and information
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function 'helpful-callable)
    (counsel-describe-variable-function 'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key)
  )
#+end_src

* Project Management
#+begin_src emacs-lisp
  (setq auth-sources '("~/.authinfo"))
  (use-package magit
    :commands magit-status
    )
  (use-package projectile
    :diminish
    :config
    (projectile-mode)
    )
  (use-package forge
    :after magit)

  (use-package treemacs
    :defer t)
#+end_src

* LSP

#+begin_src emacs-lisp
  (defun luna/lsp-setup ()
    (setq lsp-headerline-breadcrumb-segments '(file symbols))
    (lsp-headerline-breadcrumb-mode)
    (setq lsp-diagnostics-attributes '((unnecessary :foreground "#00ffff")
                                       (deprecated :strike-through t)))
  )
  (defun luna/flycheck-setup ()
  )
  (defun luna/lsp-ui-setup ()
  )

  (use-package lsp-mode
    :after general
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . luna/lsp-setup)
    :config
    (lsp-enable-which-key-integration t)
    (setq lsp-eldoc-enable-hover nil))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :hook (lsp-ui-mode . luna/lsp-ui-setup)
    :custom
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-delay 2)
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-sideline-show-hover t)
  )
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package flycheck
     :commands flycheck-mode
     :hook (flycheck-mode . luna/flycheck-setup)
  )
  (use-package lsp-treemacs
    :after (lsp treemacs))
  (use-package lsp-ivy
    :after (lsp ivy))
#+end_src

#+begin_src emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
  )

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+end_src

* Programming languages

#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
  )
#+end_src

* Terminals

#+begin_src emacs-lisp
  (use-package term
    :config
    (setq explicit-shell-file-name "fish")
    (setq term-prompt-regexp "^.* +")
  )
#+end_src

#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
  )
#+end_src

#+begin_src emacs-lisp
  (defun luna/setup-eshell ()
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (general-def '(normal insert visual) :keymaps eshell-mode-map
       "C-r" 'counsel-esh-history
       "<home>" 'eshell-bol)
    (evil-normalize-keymaps)

    (setq eshell-history-size 10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t)
  )

  (use-package eshell-git-prompt
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . luna/setup-eshell)
    :config
    (eshell-git-prompt-use-theme 'powerline)
    (with-eval-after-load 'esh-opt
      (add-to-list 'eshell-visual-commands "vim"))
  )
#+end_src

* Dired

#+begin_src emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-alhv --group-directories-first"))
  )

  (use-package dired-single
    :after dired)

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired-hide-dotfiles
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode)
  )
  (use-package diredfl
    :config
    (diredfl-global-mode)
 )
#+end_src
